-- CREATE DATABASE default_catalog.realtime_data;

-- USE default_catalog.realtime_data;

-- CREATE EXTERNAL CATALOG iceberg_catalog_glue
--  PROPERTIES
--  (
--  "type" = "iceberg",
--  "iceberg.catalog.type" = "glue",
--  "aws.glue.use_instance_profile" = "true",
--  "aws.glue.region" = <insert-region-here>, 
--  "aws.s3.use_instance_profile" = "true",
--  "aws.s3.region" = "<insert-region-here>" 
--  );

-- CREATE TABLE iceberg_catalog_glue.<insert-database-name>.refdata (
--     symbol STRING,
--     isin STRING,
--     cusip STRING,
--     description STRING,
--     security_type STRING,
--     exchange STRING,
--     currency STRING
-- );

-- CREATE TABLE iceberg_catalog_glue.<insert-database-name>.books (
--     book_id STRING,
--     book_name STRING,
--     desk STRING,
--     currency STRING
-- );

-- CREATE TABLE iceberg_catalog_glue.<insert-database-name>.traders (
--     trader_id STRING,
--     name STRING,
--     team STRING
-- );

-- CREATE TABLE iceberg_catalog_glue.<insert-database-name>.booktraders (
--     book_id STRING,
--     trader_id STRING,
--     role STRING
-- );

-- CREATE TABLE prices (
--     symbol STRING,
--     price_timestamp DATETIME,
--     price DECIMAL(18,8)
-- )
-- DUPLICATE KEY (symbol, price_timestamp)
-- PARTITION BY date_trunc('DAY', price_timestamp)
-- DISTRIBUTED BY HASH(symbol) 
-- BUCKETS 8
-- PROPERTIES (
--     "colocate_with" = "symbol_group"
-- );

-- CREATE TABLE default_catalog.realtime_data.trades (
--     trade_id STRING,
--     order_id STRING,
--     book_id STRING,
--     symbol STRING,
--     trade_timestamp DATETIME,
--     side STRING,
--     price DECIMAL(18,8),
--     quantity DECIMAL(18,6),
--     fill_number INT,
--     total_fills INT,
--     fills_remaining INT
-- );

-- CREATE MATERIALIZED VIEW default_catalog.realtime_data.positions_base_mv
-- DISTRIBUTED BY HASH(symbol) BUCKETS 8
-- REFRESH ASYNC START("2025-09-02 12:30:00") EVERY (INTERVAL 1 MINUTE)
-- AS
-- SELECT
--     t.book_id,
--     t.symbol,

--     -- Net position (buys add, sells subtract)
--     SUM(
--         CASE
--             WHEN t.side = 'BUY'  THEN t.quantity
--             WHEN t.side = 'SELL' THEN -t.quantity
--         END
--     ) AS net_quantity,

--     -- Weighted average price (on buys only)
--     SUM(
--         CASE
--             WHEN t.side = 'BUY' THEN t.quantity * t.price
--         END
--     ) / NULLIF(
--         SUM(
--             CASE
--                 WHEN t.side = 'BUY' THEN t.quantity
--             END
--         ),
--         0
--     ) AS avg_price

-- FROM default_catalog.realtime_data.trades t
-- GROUP BY
--     t.book_id,
--     t.symbol
-- HAVING
--     SUM(
--         CASE
--             WHEN t.side = 'BUY'  THEN t.quantity
--             WHEN t.side = 'SELL' THEN -t.quantity
--         END
--     ) > 0;

-- CREATE MATERIALIZED VIEW default_catalog.realtime_data.positions_with_price_mv
-- DISTRIBUTED BY HASH(symbol) BUCKETS 8
-- REFRESH ASYNC START("2025-09-02 12:30:00") EVERY (INTERVAL 1 MINUTE)
-- PROPERTIES (
--     "colocate_with" = "symbol_group"
-- )
-- AS
-- SELECT
--     p.book_id,
--     p.symbol,
--     p.net_quantity,
--     p.avg_price,
--     pr.price AS current_price
-- FROM positions_base_mv p
-- LEFT JOIN (
--     SELECT
--         symbol,
--         MAX(price_timestamp) AS max_ts
--     FROM prices
--     GROUP BY symbol
-- ) latest
--     ON p.symbol = latest.symbol
-- LEFT JOIN prices pr
--     ON pr.symbol = latest.symbol
--    AND pr.price_timestamp = latest.max_ts;

-- CREATE MATERIALIZED VIEW default_catalog.realtime_data.positions_pnl_view
-- DISTRIBUTED BY HASH(symbol) BUCKETS 8
-- REFRESH ASYNC START("2025-09-02 12:30:00") EVERY (INTERVAL 1 MINUTE)
-- AS
-- SELECT
--     p.book_id,
--     b.book_name,
--     bt.trader_id,
--     t.name AS trader_name,
--     p.symbol,
--     r.description AS security_description,
--     p.net_quantity,
--     p.avg_price,
--     p.current_price,
--     (p.current_price - p.avg_price) * p.net_quantity AS unrealized_pnl
-- FROM default_catalog.realtime_data.positions_with_price_mv p
-- LEFT JOIN iceberg_catalog_glue.<insert-database-name>.refdata r
--     ON p.symbol = r.symbol
-- LEFT JOIN iceberg_catalog_glue.<insert-database-name>.books b
--     ON p.book_id = b.book_id
-- LEFT JOIN iceberg_catalog_glue.<insert-database-name>.booktraders bt
--     ON p.book_id = bt.book_id
-- LEFT JOIN iceberg_catalog_glue.<insert-database-name>.traders t
--     ON bt.trader_id = t.trader_id;

-- CREATE ROUTINE LOAD trades_routine_load ON trades
-- COLUMNS(trade_id, order_id, book_id, symbol, trade_timestamp, side, price, quantity, fill_number, total_fills, fills_remaining)
-- PROPERTIES
-- (
-- "desired_concurrent_number"="1",
-- "format" ="json"
-- )
-- FROM KAFKA
-- (
-- "kafka_broker_list" ="your-host:9092",
-- "kafka_topic" = "trades_topic",
-- "property.kafka_default_offsets" = "OFFSET_BEGINNING"
-- );

-- CREATE ROUTINE LOAD prices_routine_load ON prices
-- COLUMNS(symbol, price_timestamp, price)
-- PROPERTIES
-- (
-- "desired_concurrent_number"="1",
-- "format" ="json"
-- )
-- FROM KAFKA
-- (
-- "kafka_broker_list" ="your-host:9092",
-- "kafka_topic" = "prices_topic",
-- "property.kafka_default_offsets" = "OFFSET_BEGINNING"
-- );
